extends CharacterBody3D

const GRID_SIZE = 32
const MOVE_SPEED = 1.0

var is_executing = false
var current_tween: Tween
var start_position: Vector3

signal program_finished(success: bool)
signal drone_moved

func _ready():
	# –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
	await get_tree().process_frame
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–ï–ö–£–©–£–Æ –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—É—é (—É–∂–µ –æ—Ç—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–Ω—É—é)
	start_position = global_position
	print("üöÅ –î—Ä–æ–Ω –≥–æ—Ç–æ–≤, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ", vector3_to_str(start_position))

func return_to_start():
	print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é –¥—Ä–æ–Ω–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é...")
	
	# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
	if current_tween:
		current_tween.kill()
	
	is_executing = false
	
	# –ü–ª–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
	current_tween = create_tween()
	current_tween.tween_property(self, "global_position", start_position, MOVE_SPEED * 1.5)
	await current_tween.finished
	
	print("‚úÖ –î—Ä–æ–Ω –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é: ", vector3_to_str(global_position))
	drone_moved.emit()

func execute_sequence(sequence: Array):
	if is_executing:
		print("‚ùå –î—Ä–æ–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É!")
		return
	if sequence.is_empty():
		print("‚ùå –ü—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
		program_finished.emit(false)
		return
		
	print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥—Ä–æ–Ω–∞ –∏–∑ ", sequence.size(), " –∫–æ–º–∞–Ω–¥")
	is_executing = true
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –¥–ª—è —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
	start_position = global_position
	print("üìç –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏: ", vector3_to_str(start_position))
	
	# –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	var success = await execute_actions(sequence)
	is_executing = false
	
	if not success:
		print("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é –¥—Ä–æ–Ω–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç")
		await return_to_start()
	else:
		print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	
	program_finished.emit(success)

func execute_actions(sequence: Array) -> bool:
	for i in range(sequence.size()):
		var action = sequence[i]
		print("üéØ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É ", i + 1, "/", sequence.size(), ": ", get_direction_name(action))
		await perform_grid_movement(action)
	
	# –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
	await get_tree().create_timer(0.5).timeout
	
	# –í Level1 —É—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–ª–ª–∏–∑–∏—é —Å —Ü–µ–ª—å—é
	# –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —É—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –≤ _on_target_body_entered
	return false

func get_direction_name(direction: int) -> String:
	match direction:
		0: return "–í–ø–µ—Ä–µ–¥"
		1: return "–ù–∞–∑–∞–¥" 
		2: return "–í–ª–µ–≤–æ"
		3: return "–í–ø—Ä–∞–≤–æ"
		4: return "–í–≤–µ—Ä—Ö"
		5: return "–í–Ω–∏–∑"
		_: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

func perform_grid_movement(direction: int):
	var start_pos = global_position
	var target_position = global_position
	
	# –î–≤–∏–≥–∞–µ–º—Å—è –Ω–∞ —Ü–µ–ª—É—é –∫–ª–µ—Ç–∫—É GRID_SIZE, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
	match direction:
		0: target_position.z -= GRID_SIZE  # –í–ø–µ—Ä–µ–¥
		1: target_position.z += GRID_SIZE  # –ù–∞–∑–∞–¥
		2: target_position.x -= GRID_SIZE  # –í–ª–µ–≤–æ
		3: target_position.x += GRID_SIZE  # –í–ø—Ä–∞–≤–æ
		4: target_position.y += GRID_SIZE  # –í–≤–µ—Ä—Ö
		5: target_position.y = max(target_position.y - GRID_SIZE, 0)  # –í–Ω–∏–∑
	
	print("üìç –î–≤–∏–≥–∞—é—Å—å –∏–∑ ", vector3_to_str(start_pos), " –≤ ", vector3_to_str(target_position))
	
	current_tween = create_tween()
	current_tween.tween_property(self, "global_position", target_position, MOVE_SPEED)
	await current_tween.finished
	
	drone_moved.emit()
	print("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: ", vector3_to_str(global_position))
	
	# –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–≤–∏–∂–µ–Ω–∏—è–º–∏
	await get_tree().create_timer(0.1).timeout

func vector3_to_str(vec: Vector3) -> String:
	return "(%d, %d, %d)" % [vec.x, vec.y, vec.z]

func stop_execution():
	print("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	is_executing = false
	
	if current_tween:
		current_tween.kill()
	
	# –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç
	await return_to_start()
	
	program_finished.emit(false)
