# script_game_level.gd
extends Control

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —É—Ä–æ–≤–Ω—è–º–∏
var level_containers = []
var back_button
var selected_level: int = 0

# –ü—Ä–µ—Ñ–∞–± –∫–Ω–æ–ø–∫–∏ —É—Ä–æ–≤–Ω—è
var level_button_scene = preload("res://UI/LevelButton.tscn")

func _ready():
	print("=== LEVEL SELECTION INITIALIZATION ===")
	
	# –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Global
	await get_tree().process_frame
	
	# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–∑–ª—ã
	find_all_nodes()
	
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É—Ä–æ–≤–Ω–µ–π
	create_level_buttons()
	
	# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
	await get_tree().process_frame
	update_layout()

func find_all_nodes():
	# –ù–∞—Ö–æ–¥–∏–º –í–°–ï –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —É—Ä–æ–≤–Ω—è–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	find_level_containers()
	
	# –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
	back_button = find_node_by_path("CenterContainer4/HBoxContainer/VBoxContainer/back_butt")
	if not back_button:
		back_button = find_child("back_butt", true, false)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
	if back_button:
		back_button.pressed.connect(_on_back_button_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞–π–¥–µ–Ω–∞: ", back_button.name)
	else:
		print("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		create_fallback_back_button()
	
	print("–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π: ", level_containers.size())

func find_level_containers():
	# –ò—â–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É—Ä–æ–≤–Ω–µ–π
	var possible_containers = [
		"CenterContainer/VBoxContainer/HBoxContainer",
		"CenterContainer2/VBoxContainer/HBoxContainer", 
        "CenterContainer3/VBoxContainer/HBoxContainer"
	]
	
	for path in possible_containers:
		var container = find_node_by_path(path)
		if container and container not in level_containers:
			level_containers.append(container)
			print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ", path)

func create_fallback_back_button():
	var fallback_button = Button.new()
	fallback_button.text = "–ù–∞–∑–∞–¥ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)"
	fallback_button.size = Vector2(100, 50)
	fallback_button.position = Vector2(20, 20)
	fallback_button.pressed.connect(_on_back_button_pressed)
	add_child(fallback_button)
	back_button = fallback_button
	print("–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥")

func update_layout():
	# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	for container in level_containers:
		if container:
			container.queue_sort()
			container.queue_redraw()

func find_node_by_path(path: String):
	var node = self
	var parts = path.split("/")
	
	for part in parts:
		node = node.get_node_or_null(part)
		if not node:
			return null
	
	return node

func create_level_buttons():
	# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
	clear_existing_buttons()
	
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è 15 —É—Ä–æ–≤–Ω–µ–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
	for level in range(1, 16):
		var level_button = level_button_scene.instantiate()
		level_button.set_level_number(level)
		
		# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É
		level_button.pressed.connect(_on_level_button_pressed.bind(level))
		
		# –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è
		if Global:
			var level_data = Global.get_level_data(level)
			if not level_data.is_empty():
				level_button.set_level_data(level_data)
				print("‚úÖ –ü–µ—Ä–µ–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è ", level, " –≤ –∫–Ω–æ–ø–∫—É: unlocked=", level_data["unlocked"])
		
		# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ–±–∞–≤–∏—Ç—å (–ø–æ –ø–æ—Ä—è–¥–∫—É)
		var container_index = floor((level - 1) / 5.0)
		if container_index < level_containers.size():
			level_containers[container_index].add_child(level_button)
			print("–î–æ–±–∞–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å ", level, " –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ", container_index + 1)
		else:
			print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å ", level, " - –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–æ–∫
	update_level_buttons()

func clear_existing_buttons():
	# –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
	for container in level_containers:
		if container:
			for child in container.get_children():
				if child is Button or child.has_method("set_level_number"):
					child.queue_free()

func update_level_buttons():
	# –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —É—Ä–æ–≤–Ω–µ–π
	for container in level_containers:
		if container:
			for child in container.get_children():
				if child.has_method("update_appearance"):
					child.update_appearance()

func _on_level_button_pressed(level_number: int):
	print("üéØ === LEVEL SELECTION: –ö–ù–û–ü–ö–ê –£–†–û–í–ù–Ø ", level_number, " –ù–ê–ñ–ê–¢–ê ===")
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
	selected_level = level_number
	
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–º–µ–Ω—ã —Å—Ü–µ–Ω—ã
	var timer = Timer.new()
	add_child(timer)
	timer.timeout.connect(_load_selected_level)
	timer.one_shot = true
	timer.start(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

func _load_selected_level():
	print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å ", selected_level)
	
	if Global:
		Global.current_level = selected_level
		print("‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Global: ", Global.current_level)
	
	var tree = get_tree()
	if tree == null:
		print("‚ùå get_tree() is null!")
		return
	
	var level_path = "res://DroneLevels/Levels/Level%d.tscn" % selected_level
	if FileAccess.file_exists(level_path):
		print("   –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É: ", level_path)
		var error = tree.change_scene_to_file(level_path)
		if error != OK:
			print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ", error)
	else:
		# –ï—Å–ª–∏ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É –¥—Ä–æ–Ω–∞
		print("‚ùå –°—Ü–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ", level_path)
		print("   –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É –¥—Ä–æ–Ω–∞...")
		var error = tree.change_scene_to_file("res://DroneLevels/DroneScene.tscn")
		if error != OK:
			print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–π —Å—Ü–µ–Ω—ã: ", error)

func _on_back_button_pressed():
	print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥")
	var tree = get_tree()
	if tree:
		tree.change_scene_to_file("res://main_scene.tscn")

func show_locked_message():
	print("–£—Ä–æ–≤–µ–Ω—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–≤–Ω–∏.")
