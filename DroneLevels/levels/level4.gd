extends Node3D

const GRID_SIZE = 32

@onready var drone_scene = $DroneScene
var target_points = []
var collected_targets = 0
var total_targets = 2
var is_level_completed = false

func _ready():
	print("üéÆ –£–†–û–í–ï–ù–¨ 4 –ó–ê–ì–†–£–ñ–ï–ù")
	print("–°–æ–±–µ—Ä–∏ 2 —à–∞—Ä–∏–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã—Å–æ—Ç–∞—Ö!")
	
	await get_tree().process_frame
	setup_level()

func setup_level():
	create_target_points()
	await setup_drone()
	print("‚úÖ –£—Ä–æ–≤–µ–Ω—å 4 –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

func grid_to_world(grid_x: int, grid_z: int, y_height: float = 0) -> Vector3:
	var world_x = grid_x * GRID_SIZE + GRID_SIZE / 2
	var world_z = grid_z * GRID_SIZE + GRID_SIZE / 2
	return Vector3(world_x, y_height, world_z)

func create_target_points():
	# –ü–µ—Ä–≤—ã–π —à–∞—Ä–∏–∫ - –Ω–∞ 1 –±–ª–æ–∫ –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
	create_target_point(1, 1, 32, Color.GREEN)  # x:1, z:1, –≤—ã—Å–æ—Ç–∞: +1 –±–ª–æ–∫
	
	# –í—Ç–æ—Ä–æ–π —à–∞—Ä–∏–∫ - –Ω–∞ 2 –±–ª–æ–∫–∞ –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
	create_target_point(3, -1, 64, Color.GREEN)  # x:3, z:-1, –≤—ã—Å–æ—Ç–∞: +2 –±–ª–æ–∫–∞

func create_target_point(grid_x: int, grid_z: int, height: float, color: Color):
	var target_point = Area3D.new()
	target_point.name = "TargetPoint_%d_%d" % [grid_x, grid_z]
	
	# –ö–æ–ª–ª–∏–∑–∏—è
	var collision = CollisionShape3D.new()
	var sphere_shape = SphereShape3D.new()
	sphere_shape.radius = 8.0
	collision.shape = sphere_shape
	target_point.add_child(collision)
	
	# –í–∏–∑—É–∞–ª
	var mesh_instance = MeshInstance3D.new()
	var sphere = SphereMesh.new()
	sphere.radius = 6.0
	sphere.height = 12.0
	mesh_instance.mesh = sphere
	
	var material = StandardMaterial3D.new()
	material.albedo_color = color
	material.emission_enabled = true
	material.emission = color * 0.3
	mesh_instance.material_override = material
	
	target_point.add_child(mesh_instance)
	
	# –ü–æ–∑–∏—Ü–∏—è
	target_point.position = grid_to_world(grid_x, grid_z, height)
	
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
	target_point.collision_layer = 2
	target_point.collision_mask = 1
	
	# –°–∏–≥–Ω–∞–ª
	target_point.body_entered.connect(_on_target_body_entered.bind(target_point))
	
	add_child(target_point)
	target_points.append(target_point)
	print("‚úÖ –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: %s (–≤—ã—Å–æ—Ç–∞: %d)" % [target_point.position, height])


func _on_target_body_entered(body: Node, target_point: Area3D):
	if is_level_completed:
		return
	
	print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å —à–∞—Ä–∏–∫–æ–º!")
	
	if body is CharacterBody3D and ("Drone" in body.name or "DefaultDrone" in body.name):
		# –ü–æ–º–µ—á–∞–µ–º —à–∞—Ä–∏–∫ –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–π
		target_point.queue_free()
		collected_targets += 1
		
		print("‚úÖ –°–æ–±—Ä–∞–Ω —à–∞—Ä–∏–∫ %d/%d" % [collected_targets, total_targets])
		
		# –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
		play_collection_sound()
		
		# –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
		create_collection_effect(target_point.position)
		
		if collected_targets >= total_targets:
			print("üéâ –í—Å–µ —à–∞—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã!")
			complete_level()

func play_collection_sound():
	# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
	print("üîä –ó–≤—É–∫ —Å–±–æ—Ä–∞ —à–∞—Ä–∏–∫–∞")

func create_collection_effect(position: Vector3):
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
	var particles = GPUParticles3D.new()
	var particle_material = StandardMaterial3D.new()
	particle_material.albedo_color = Color(1, 0.8, 0)
	particle_material.emission_enabled = true
	
	particles.position = position
	particles.explosiveness = 0.8
	particles.one_shot = true
	particles.amount = 20
	particles.lifetime = 1.0
	
	add_child(particles)
	particles.emitting = true
	
	# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
	await get_tree().create_timer(2.0).timeout
	particles.queue_free()

func setup_drone():
	if drone_scene == null:
		print("‚ùå DroneScene –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	
	await get_tree().create_timer(0.2).timeout
	
	var drone = drone_scene.get_drone()
	if drone == null:
		print("‚ùå –î—Ä–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DroneScene")
		return
	
	print("‚úÖ –î—Ä–æ–Ω –Ω–∞–π–¥–µ–Ω: ", drone.name)
	print("üöÅ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥—Ä–æ–Ω–∞: ", drone.global_position)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
	drone.collision_layer = 1
	drone.collision_mask = 2
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
	if drone.has_signal("program_finished"):
		drone.program_finished.connect(_on_drone_program_finished)
		print("‚úÖ –°–∏–≥–Ω–∞–ª program_finished –ø–æ–¥–∫–ª—é—á–µ–Ω")
	else:
		print("‚ùå –°–∏–≥–Ω–∞–ª program_finished –Ω–µ –Ω–∞–π–¥–µ–Ω")

func _on_drone_program_finished(success: bool):
	print("üéØ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥—Ä–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–±—Ä–∞–Ω–æ —à–∞—Ä–∏–∫–æ–≤: %d/%d" % [collected_targets, total_targets])
	
	if collected_targets >= total_targets:
		complete_level()
	else:
		print("‚ùå –ù–µ –≤—Å–µ —à–∞—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã!")

func complete_level():
	if is_level_completed:
		return
	
	is_level_completed = true
	print("üéâ –£–†–û–í–ï–ù–¨ 4 –ó–ê–í–ï–†–®–ï–ù!")
	
	# –û–ø–æ–≤–µ—â–∞–µ–º –¥—Ä–æ–Ω –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	var drone_scene = $DroneScene
	if drone_scene and drone_scene.has_method("_on_program_finished"):
		drone_scene._on_program_finished(true)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	if Global:
		Global.complete_level(4, 10, 5)  # –ë–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
		print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
	
	show_success_message()

func show_success_message():
	var success_ui = CanvasLayer.new()
	success_ui.layer = 15
	
	var panel = Panel.new()
	panel.size = Vector2(400, 200)
	var viewport_size = get_viewport().get_visible_rect().size
	panel.position = (viewport_size - panel.size) / 2
	
	var style = StyleBoxFlat.new()
	style.bg_color = Color(0, 0, 0, 0.8)
	style.border_color = Color.GOLD
	style.border_width_left = 2
	style.border_width_top = 2
	style.border_width_right = 2
	style.border_width_bottom = 2
	panel.add_theme_stylebox_override("panel", style)
	
	var label = Label.new()
	label.text = "–£–†–û–í–ï–ù–¨ 4 –ü–†–û–ô–î–ï–ù!\n\n–°–æ–±—Ä–∞–Ω—ã –≤—Å–µ —à–∞—Ä–∏–∫–∏!\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
	label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	label.add_theme_font_size_override("font_size", 20)
	label.add_theme_color_override("font_color", Color.GOLD)
	label.size = panel.size
	
	panel.add_child(label)
	success_ui.add_child(panel)
	add_child(success_ui)
	
	await get_tree().create_timer(3.0).timeout
	return_to_selection()

func _input(event):
	if event is InputEventKey and event.pressed and event.keycode == KEY_ESCAPE:
		return_to_selection()

func return_to_selection():
	print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π...")
	Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	get_tree().change_scene_to_file("res://UI/game_level.tscn")
