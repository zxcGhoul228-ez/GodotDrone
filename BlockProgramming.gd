# BlockProgramming.gd
extends Panel

@onready var block_palette = $BlockPalette
@onready var program_area = $ProgramArea

var dragged_block = null
var dragged_block_data = null
var program_blocks = []  # –•—Ä–∞–Ω–∏—Ç {type, container, count, color}

func _ready():
	print("üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º")
	setup_ui()
	create_available_blocks()
	print("‚úÖ –ü–∞–Ω–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞")

func setup_ui():
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–∏
	custom_minimum_size = Vector2(600, 650)
	size = Vector2(600, 650)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	if block_palette:
		block_palette.custom_minimum_size = Vector2(200, 500)
		block_palette.size = Vector2(200, 500)
		block_palette.position = Vector2(20, 20)
	
	if program_area:
		program_area.custom_minimum_size = Vector2(350, 500)
		program_area.size = Vector2(350, 500)
		program_area.position = Vector2(230, 20)
		
		# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
		show_program_hint()

func create_available_blocks():
	var blocks = [
		{"name": "–í–ø–µ—Ä–µ–¥", "type": 0, "color": Color.CORNFLOWER_BLUE, "icon": "‚¨ÜÔ∏è"},
		{"name": "–ù–∞–∑–∞–¥", "type": 1, "color": Color.CORNFLOWER_BLUE, "icon": "‚¨áÔ∏è"},
		{"name": "–í–ª–µ–≤–æ", "type": 2, "color": Color.LIGHT_GREEN, "icon": "‚¨ÖÔ∏è"},
		{"name": "–í–ø—Ä–∞–≤–æ", "type": 3, "color": Color.LIGHT_GREEN, "icon": "‚û°Ô∏è"},
		{"name": "–í–≤–µ—Ä—Ö", "type": 4, "color": Color.GOLD, "icon": "üîº"},
		{"name": "–í–Ω–∏–∑", "type": 5, "color": Color.GOLD, "icon": "üîΩ"}
	]
	
	# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
	for child in block_palette.get_children():
		child.queue_free()
	
	# –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–µ –±–ª–æ–∫–∏
	for block_data in blocks:
		var draggable_block = create_draggable_block(block_data)
		block_palette.add_child(draggable_block)

func create_draggable_block(block_data: Dictionary) -> Control:
	var container = Control.new()
	container.custom_minimum_size = Vector2(180, 70)
	container.size = Vector2(180, 70)
	container.mouse_filter = Control.MOUSE_FILTER_PASS
	
	# –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	var block_button = Button.new()
	block_button.text = block_data["icon"] + " " + block_data["name"]
	block_button.custom_minimum_size = Vector2(180, 60)
	block_button.size = Vector2(180, 60)
	block_button.mouse_filter = Control.MOUSE_FILTER_STOP
	
	# –Ø—Ä–∫–∏–π —Ü–≤–µ—Ç–Ω–æ–π —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
	apply_block_style(block_button, block_data["color"])
	
	# –ü–æ–¥—Å–∫–∞–∑–∫–∞
	block_button.tooltip_text = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	block_button.gui_input.connect(_on_draggable_block_gui_input.bind(block_data, container))
	
	container.add_child(block_button)
	return container

func apply_block_style(button: Button, color: Color):
	var style_box = StyleBoxFlat.new()
	style_box.bg_color = color
	style_box.border_color = color.darkened(0.4)
	style_box.border_width_left = 3
	style_box.border_width_top = 3
	style_box.border_width_right = 3
	style_box.border_width_bottom = 3
	style_box.corner_radius_top_left = 8
	style_box.corner_radius_top_right = 8
	style_box.corner_radius_bottom_right = 8
	style_box.corner_radius_bottom_left = 8
	
	button.add_theme_stylebox_override("normal", style_box)
	button.add_theme_stylebox_override("disabled", style_box)  # –í–ê–ñ–ù–û: –¥–ª—è disabled —Ç–æ–∂–µ
	button.add_theme_color_override("font_color", Color.WHITE)
	button.add_theme_font_size_override("font_size", 14)

func _on_draggable_block_gui_input(event: InputEvent, block_data: Dictionary, container: Control):
	if event is InputEventMouseButton and event.pressed:
		if event.button_index == MOUSE_BUTTON_LEFT:
			start_dragging(block_data, container)
			get_viewport().set_input_as_handled()

func start_dragging(block_data: Dictionary, original_container: Control):
	print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: ", block_data["name"])
	
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –±–ª–æ–∫–∞ —Å –¢–ê–ö–ò–ú –ñ–ï –¶–í–ï–¢–û–ú
	dragged_block = create_drag_visual(block_data)
	dragged_block_data = block_data
	dragged_block.mouse_filter = Control.MOUSE_FILTER_IGNORE
	
	# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
	get_parent().add_child(dragged_block)
	
	set_drag_position(get_global_mouse_position())

func create_drag_visual(block_data: Dictionary) -> Control:
	var container = Control.new()
	container.mouse_filter = Control.MOUSE_FILTER_IGNORE
	
	var visual = Button.new()
	visual.text = block_data["icon"] + " " + block_data["name"]
	visual.custom_minimum_size = Vector2(180, 60)
	visual.size = Vector2(180, 60)
	visual.disabled = true
	visual.mouse_filter = Control.MOUSE_FILTER_IGNORE
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –¢–ê–ö–û–ô –ñ–ï —Ü–≤–µ—Ç–Ω–æ–π —Å—Ç–∏–ª—å –∫–∞–∫ —É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
	apply_block_style(visual, block_data["color"])
	
	# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
	var shadow_style = style_box_with_shadow(block_data["color"])
	visual.add_theme_stylebox_override("disabled", shadow_style)
	
	container.add_child(visual)
	return container

func style_box_with_shadow(color: Color) -> StyleBoxFlat:
	var style_box = StyleBoxFlat.new()
	style_box.bg_color = color
	style_box.border_color = color.darkened(0.4)
	style_box.border_width_left = 3
	style_box.border_width_top = 3
	style_box.border_width_right = 3
	style_box.border_width_bottom = 3
	style_box.corner_radius_top_left = 8
	style_box.corner_radius_top_right = 8
	style_box.corner_radius_bottom_right = 8
	style_box.corner_radius_bottom_left = 8
	style_box.shadow_color = Color(0, 0, 0, 0.6)
	style_box.shadow_size = 8
	style_box.shadow_offset = Vector2(3, 3)
	return style_box

func _input(event):
	# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –±–ª–æ–∫–∞
	if dragged_block and event is InputEventMouseMotion:
		set_drag_position(get_global_mouse_position())
	
	# –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
	if dragged_block and event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT and not event.pressed:
			finish_dragging()
			get_viewport().set_input_as_handled()

func set_drag_position(position: Vector2):
	if dragged_block:
		dragged_block.global_position = position - dragged_block.size / 2

func finish_dragging():
	if not dragged_block or not dragged_block_data:
		return
		
	var drop_position = get_global_mouse_position()
	var program_rect = program_area.get_global_rect()
	
	if program_rect.has_point(drop_position):
		print("‚úÖ –ë–ª–æ–∫ –ø–æ–º–µ—â–µ–Ω –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã")
		# –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
		add_block_to_program(dragged_block_data, 1)
	else:
		print("‚ùå –ë–ª–æ–∫ –ø–æ–º–µ—â–µ–Ω –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
	
	# –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
	dragged_block.queue_free()
	dragged_block = null
	dragged_block_data = null

func add_block_to_program(block_data: Dictionary, count: int):
	# –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
	if program_area.get_child_count() > 0 and program_area.get_child(0) is Label:
		program_area.get_child(0).queue_free()
	
	var program_block = create_program_block(block_data, count)
	program_area.add_child(program_block)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –≤ –º–∞—Å—Å–∏–≤–µ
	program_blocks.append({
		"type": block_data["type"],
		"container": program_block,
		"count": count,
		"color": block_data["color"],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç!
		"name": block_data["name"],
		"icon": block_data["icon"]
	})
	
	update_block_numbers()
	print("‚úÖ –ë–ª–æ–∫ '", block_data["name"], "' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É. –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ", program_blocks.size())

func create_program_block(block_data: Dictionary, count: int) -> HBoxContainer:
	var container = HBoxContainer.new()
	container.custom_minimum_size = Vector2(330, 55)
	container.size = Vector2(330, 55)
	
	# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
	var up_btn = Button.new()
	up_btn.text = "‚Üë"
	up_btn.custom_minimum_size = Vector2(30, 45)
	up_btn.tooltip_text = "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã—à–µ"
	up_btn.add_theme_font_size_override("font_size", 12)
	up_btn.pressed.connect(_on_move_up.bind(container))
	
	# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–Ω–∏–∑
	var down_btn = Button.new()
	down_btn.text = "‚Üì"
	down_btn.custom_minimum_size = Vector2(30, 45)
	down_btn.tooltip_text = "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∏–∂–µ"
	down_btn.add_theme_font_size_override("font_size", 12)
	down_btn.pressed.connect(_on_move_down.bind(container))
	
	# –ë–ª–æ–∫ –∫–æ–º–∞–Ω–¥—ã —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
	var block_content = Button.new()
	update_block_content_text(block_content, block_data, count)
	block_content.custom_minimum_size = Vector2(150, 45)
	block_content.size = Vector2(150, 45)
	block_content.mouse_filter = Control.MOUSE_FILTER_PASS
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –¢–ê–ö–û–ô –ñ–ï —Ü–≤–µ—Ç–Ω–æ–π —Å—Ç–∏–ª—å - –í–ê–ñ–ù–û!
	apply_block_style(block_content, block_data["color"])
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –∫–ª–∏–∫—É
	block_content.pressed.connect(_on_edit_count.bind(container, block_data))
	
	# –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ)
	var count_edit = LineEdit.new()
	count_edit.custom_minimum_size = Vector2(50, 45)
	count_edit.visible = false
	count_edit.placeholder_text = str(count)
	count_edit.text = str(count)
	count_edit.focus_exited.connect(_on_count_edit_focus_exited.bind(container, count_edit, block_data))
	count_edit.text_submitted.connect(_on_count_text_submitted.bind(container, count_edit, block_data))
	
	# –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
	var delete_btn = Button.new()
	delete_btn.text = "üóëÔ∏è"
	delete_btn.custom_minimum_size = Vector2(40, 45)
	delete_btn.tooltip_text = "–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫"
	delete_btn.add_theme_font_size_override("font_size", 12)
	
	# –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
	var delete_style = StyleBoxFlat.new()
	delete_style.bg_color = Color(0.8, 0.2, 0.2)
	delete_style.corner_radius_top_left = 5
	delete_style.corner_radius_top_right = 5
	delete_style.corner_radius_bottom_right = 5
	delete_style.corner_radius_bottom_left = 5
	delete_btn.add_theme_stylebox_override("normal", delete_style)
	delete_btn.add_theme_color_override("font_color", Color.WHITE)
	
	delete_btn.pressed.connect(_on_delete_block.bind(container))
	
	container.add_child(up_btn)
	container.add_child(down_btn)
	container.add_child(block_content)
	container.add_child(count_edit)
	container.add_child(delete_btn)
	
	return container

func update_block_content_text(button: Button, block_data: Dictionary, count: int):
	if count > 1:
		button.text = block_data["icon"] + " " + block_data["name"] + " √ó" + str(count)
	else:
		button.text = block_data["icon"] + " " + block_data["name"]

func _on_edit_count(container: HBoxContainer, block_data: Dictionary):
	var block_content = container.get_child(2) as Button
	var count_edit = container.get_child(3) as LineEdit
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
	block_content.visible = false
	count_edit.visible = true
	count_edit.grab_focus()
	count_edit.select_all()

func _on_count_edit_focus_exited(container: HBoxContainer, count_edit: LineEdit, block_data: Dictionary):
	apply_count_change(container, count_edit, block_data)

func _on_count_text_submitted(new_text: String, container: HBoxContainer, count_edit: LineEdit, block_data: Dictionary):
	apply_count_change(container, count_edit, block_data)

func apply_count_change(container: HBoxContainer, count_edit: LineEdit, block_data: Dictionary):
	var block_content = container.get_child(2) as Button
	
	# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
	count_edit.visible = false
	block_content.visible = true
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	var count = 1
	if count_edit.text.is_valid_int():
		count = clamp(count_edit.text.to_int(), 1, 10)
		count_edit.text = str(count)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
	update_block_content_text(block_content, block_data, count)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤–µ
	for i in range(program_blocks.size()):
		if program_blocks[i]["container"] == container:
			program_blocks[i]["count"] = count
			break

func _on_move_up(container: HBoxContainer):
	var index = -1
	for i in range(program_blocks.size()):
		if program_blocks[i]["container"] == container:
			index = i
			break
	
	if index > 0:
		# –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ
		var temp = program_blocks[index]
		program_blocks[index] = program_blocks[index - 1]
		program_blocks[index - 1] = temp
		
		# –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ UI
		program_area.move_child(container, index - 1)
		update_block_numbers()

func _on_move_down(container: HBoxContainer):
	var index = -1
	for i in range(program_blocks.size()):
		if program_blocks[i]["container"] == container:
			index = i
			break
	
	if index >= 0 and index < program_blocks.size() - 1:
		# –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ
		var temp = program_blocks[index]
		program_blocks[index] = program_blocks[index + 1]
		program_blocks[index + 1] = temp
		
		# –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ UI
		program_area.move_child(container, index + 1)
		update_block_numbers()

func _on_delete_block(block_container: HBoxContainer):
	# –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞
	for i in range(program_blocks.size()):
		if program_blocks[i]["container"] == block_container:
			program_blocks.remove_at(i)
			break
	
	block_container.queue_free()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–ª–æ–∫–æ–≤
	update_block_numbers()
	
	print("üóëÔ∏è –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –±–ª–æ–∫–æ–≤: ", program_blocks.size())
	
	# –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—É—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
	if program_blocks.is_empty():
		show_program_hint()

func update_block_numbers():
	# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —É –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
	for i in range(program_blocks.size()):
		var container = program_blocks[i]["container"]
		# –ù–æ–º–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, —Ç–∞–∫ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

func show_program_hint():
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
	for child in program_area.get_children():
		if child is Label:
			child.queue_free()
	
	var hint_label = Label.new()
	hint_label.text = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–ª–æ–∫–∏ —Å—é–¥–∞"
	hint_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	hint_label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	hint_label.add_theme_color_override("font_color", Color(0.7, 0.7, 0.7))
	program_area.add_child(hint_label)

func get_program_sequence() -> Array:
	var sequence = []
	
	print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
	print("–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: ", program_blocks.size())
	
	for i in range(program_blocks.size()):
		var block_data = program_blocks[i]
		# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É count —Ä–∞–∑
		for j in range(block_data["count"]):
			sequence.append(block_data["type"])
		print("  –ë–ª–æ–∫ ", i + 1, ": ", block_data["name"], " √ó", block_data["count"])
	
	print("üéØ –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ", sequence)
	return sequence

func _on_clear_button_pressed():
	print("üßπ –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É...")
	print("–ë—ã–ª–æ –±–ª–æ–∫–æ–≤: ", program_blocks.size())
	
	# –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	for block_data in program_blocks:
		block_data["container"].queue_free()
	
	# –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
	program_blocks.clear()
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
	show_program_hint()
	
	print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—á–∏—â–µ–Ω–∞! –°—Ç–∞–ª–æ –±–ª–æ–∫–æ–≤: ", program_blocks.size())

func _on_close_button_pressed():
	print("‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
	hide()
