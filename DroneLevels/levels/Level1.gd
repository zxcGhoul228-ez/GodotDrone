extends Node3D

const GRID_SIZE = 32

@onready var drone_scene = $DroneScene
var target_point: Area3D
var is_level_completed = false

func _ready():
	print("üéÆ –£–†–û–í–ï–ù–¨ 1 –ó–ê–ì–†–£–ñ–ï–ù")
	print("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ", Global.current_level)
	
	await get_tree().process_frame
	setup_level()

func setup_level():
	create_target_point()
	create_cell_marker(2, 2)
	await setup_drone()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–æ–Ω–∞
	print("‚úÖ –£—Ä–æ–≤–µ–Ω—å 1 –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

func grid_to_world(grid_x: int, grid_z: int, y_height: float = 0) -> Vector3:
	var world_x = grid_x * GRID_SIZE + GRID_SIZE / 2  # –î–û–ë–ê–í–õ–Ø–ï–ú –°–ú–ï–©–ï–ù–ò–ï –ù–ê –ü–û–õ–û–í–ò–ù–£ –ö–õ–ï–¢–ö–ò
	var world_z = grid_z * GRID_SIZE + GRID_SIZE / 2  # –î–û–ë–ê–í–õ–Ø–ï–ú –°–ú–ï–©–ï–ù–ò–ï –ù–ê –ü–û–õ–û–í–ò–ù–£ –ö–õ–ï–¢–ö–ò
	return Vector3(world_x, y_height, world_z)

func create_target_point():
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
	if has_node("TargetPoint"):
		get_node("TargetPoint").queue_free()
	
	# –°–æ–∑–¥–∞–µ–º Area3D
	target_point = Area3D.new()
	target_point.name = "TargetPoint"
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é
	var collision = CollisionShape3D.new()
	var sphere_shape = SphereShape3D.new()
	sphere_shape.radius = 8.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
	collision.shape = sphere_shape
	target_point.add_child(collision)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ñ–µ—Ä—É
	var mesh_instance = MeshInstance3D.new()
	var sphere = SphereMesh.new()
	sphere.radius = 6.0
	sphere.height = 12.0
	mesh_instance.mesh = sphere
	
	var material = StandardMaterial3D.new()
	material.albedo_color = Color.GREEN
	material.emission_enabled = true
	material.emission = Color.GREEN * 0.3
	mesh_instance.material_override = material
	
	target_point.add_child(mesh_instance)
	
	# –ü–æ–∑–∏—Ü–∏—è —Ü–µ–ª–∏ - –í–´–®–ï —É—Ä–æ–≤–Ω—è –∑–µ–º–ª–∏ —á—Ç–æ–±—ã –¥—Ä–æ–Ω –º–æ–≥ –≤ –Ω–µ–µ –≤–ª–µ—Ç–µ—Ç—å
	target_point.position = grid_to_world(2, 2, 32)  # –í—ã—Å–æ—Ç–∞ 20
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
	target_point.collision_layer = 2
	target_point.collision_mask = 1  # –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–æ–π 1 (–¥—Ä–æ–Ω)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
	target_point.body_entered.connect(_on_target_body_entered)
	
	add_child(target_point)
	print("‚úÖ –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ", target_point.position)
	print("üéØ –†–∞–¥–∏—É—Å –∫–æ–ª–ª–∏–∑–∏–∏: ", sphere_shape.radius)

func _on_target_body_entered(body: Node):
	if is_level_completed:
		return
		
	print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å: ", body.name)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥—Ä–æ–Ω
	if body is CharacterBody3D and ("Drone" in body.name or "DefaultDrone" in body.name):
		print("üéØ –î—Ä–æ–Ω –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏!")
		complete_level()

func create_cell_marker(grid_x: int, grid_z: int):
	var marker = MeshInstance3D.new()
	marker.name = "CellMarker"
	
	var plane = PlaneMesh.new()
	plane.size = Vector2(GRID_SIZE * 0.9, GRID_SIZE * 0.9)
	marker.mesh = plane
	
	var material = StandardMaterial3D.new()
	material.flags_transparent = true
	material.albedo_color = Color(0, 1, 0, 0.2)
	marker.material_override = material
	
	marker.position = grid_to_world(grid_x, grid_z, 0.1)
	marker.rotation_degrees.x = 90
	
	add_child(marker)
	print("‚úÖ –ú–∞—Ä–∫–µ—Ä –∫–ª–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω –≤: ", marker.position)

func setup_drone():
	if drone_scene == null:
		print("‚ùå DroneScene –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	
	# –ñ–¥–µ–º –ø–æ–∫–∞ –¥—Ä–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
	await get_tree().create_timer(0.2).timeout
	
	var drone = drone_scene.get_drone()
	if drone == null:
		print("‚ùå –î—Ä–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DroneScene")
		return
	
	print("‚úÖ –î—Ä–æ–Ω –Ω–∞–π–¥–µ–Ω: ", drone.name)
	print("üöÅ –ü–æ–∑–∏—Ü–∏—è –¥—Ä–æ–Ω–∞: ", drone.global_position)
	
	# –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ –¥—Ä–æ–Ω–∞
	var collision = drone.get_node_or_null("CollisionShape3D")
	if collision:
		print("‚úÖ –ö–æ–ª–ª–∏–∑–∏—è –¥—Ä–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")
		# –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞
		await get_tree().process_frame
		print("üìç –ü–æ–∑–∏—Ü–∏—è –∫–æ–ª–ª–∏–∑–∏–∏: ", collision.global_position)
	else:
		print("‚ùå –£ –¥—Ä–æ–Ω–∞ –Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏!")
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π –¥—Ä–æ–Ω–∞
	drone.collision_layer = 1  # –î—Ä–æ–Ω –Ω–∞ —Å–ª–æ–µ 1
	drone.collision_mask = 2   # –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–æ–π 2 (—Ü–µ–ª—å)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
	if drone.has_signal("program_finished"):
		drone.program_finished.connect(_on_drone_program_finished)
		print("‚úÖ –°–∏–≥–Ω–∞–ª program_finished –ø–æ–¥–∫–ª—é—á–µ–Ω")
	else:
		print("‚ùå –°–∏–≥–Ω–∞–ª program_finished –Ω–µ –Ω–∞–π–¥–µ–Ω")

func _on_drone_program_finished(success: bool):
	print("üéØ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥—Ä–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å–ø–µ—Ö: ", success)
	if success:
		complete_level()
func complete_level():
	if is_level_completed:
		return
		
	is_level_completed = true
	print("üéâ –£–†–û–í–ï–ù–¨ 1 –ó–ê–í–ï–†–®–ï–ù!")
	
	# –û–ø–æ–≤–µ—â–∞–µ–º –¥—Ä–æ–Ω –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	var drone_scene = $DroneScene
	if drone_scene and drone_scene.has_method("_on_program_finished"):
		drone_scene._on_program_finished(true)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	if Global:
		Global.complete_level(1, 5, 3)
		print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

# –£–î–ê–õ–Ø–ï–ú –∏–ª–∏ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é show_success_message –∏–∑ Level1.gd
# func show_success_message():
#	 ... –≤–µ—Å—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥ ...

func show_success_message():
	var success_ui = CanvasLayer.new()
	success_ui.layer = 15
	
	var panel = Panel.new()
	panel.size = Vector2(400, 200)
	var viewport_size = get_viewport().get_visible_rect().size
	panel.position = (viewport_size - panel.size) / 2
	
	var style = StyleBoxFlat.new()
	style.bg_color = Color(0, 0, 0, 0.8)
	style.border_color = Color.GREEN
	style.border_width_left = 2
	style.border_width_top = 2
	style.border_width_right = 2
	style.border_width_bottom = 2
	panel.add_theme_stylebox_override("panel", style)
	
	var label = Label.new()
	label.text = "–£–†–û–í–ï–ù–¨ –ü–†–û–ô–î–ï–ù!\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
	label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	label.add_theme_font_size_override("font_size", 20)
	label.add_theme_color_override("font_color", Color.GREEN)
	label.size = panel.size
	
	panel.add_child(label)
	success_ui.add_child(panel)
	add_child(success_ui)
	
	# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π
	await get_tree().create_timer(3.0).timeout
	return_to_selection()

func _input(event):
	if event is InputEventKey and event.pressed and event.keycode == KEY_ESCAPE:
		return_to_selection()
		

func return_to_selection():
	print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π...")
	Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	get_tree().change_scene_to_file("res://script_game_level.tscn")
