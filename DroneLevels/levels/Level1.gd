# Level1.gd
extends Node3D

const GRID_SIZE = 32

@onready var drone_scene = $DroneScene
var target_point: MeshInstance3D
var is_level_completed = false

func _ready():
	print("üéÆ –£–†–û–í–ï–ù–¨ 1 –ó–ê–ì–†–£–ñ–ï–ù")
	print("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ", Global.current_level)
	
	# –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
	await get_tree().process_frame
	
	setup_level()

func setup_level():
	# –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É –∏ –º–∞—Ä–∫–µ—Ä –∫–ª–µ—Ç–∫–∏
	create_target_point()
	create_cell_marker(2, 2)  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∫–ª–µ—Ç–∫–∏ (2, 2)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–æ–Ω–∞
	setup_drone()
	
	print("‚úÖ –£—Ä–æ–≤–µ–Ω—å 1 –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ç–∫–∏ –≤ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Ü–µ–Ω—Ç—Ä –∫–ª–µ—Ç–∫–∏)
func grid_to_world(grid_x: int, grid_z: int, y_height: float = 0) -> Vector3:
	var world_x = grid_x * GRID_SIZE + GRID_SIZE / 2
	var world_z = grid_z * GRID_SIZE + GRID_SIZE / 2
	return Vector3(world_x, y_height, world_z)

func create_target_point():
	target_point = MeshInstance3D.new()
	target_point.name = "TargetPoint"
	
	# –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É
	var sphere = SphereMesh.new()
	sphere.radius = 4
	sphere.height = 8
	target_point.mesh = sphere
	
	# –ó–µ–ª–µ–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Å–≤–µ—á–µ–Ω–∏–µ–º
	var material = StandardMaterial3D.new()
	material.albedo_color = Color.GREEN
	material.emission_enabled = true
	material.emission = Color.GREEN * 0.3
	target_point.material_override = material
	
	# –ü–æ–∑–∏—Ü–∏—è —Ü–µ–ª–∏ - –í –¶–ï–ù–¢–†–ï –∫–ª–µ—Ç–∫–∏ (2, 2) –Ω–∞ –≤—ã—Å–æ—Ç–µ 8 –µ–¥–∏–Ω–∏—Ü
	target_point.position = grid_to_world(2, 2, 8)
	
	add_child(target_point)
	print("‚úÖ –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–ª–µ—Ç–∫–∏ (2, 2): ", target_point.position)

func create_cell_marker(grid_x: int, grid_z: int):
	var marker = MeshInstance3D.new()
	marker.name = "CellMarker"
	
	# –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–µ—Ç–∫–∏
	var plane = PlaneMesh.new()
	plane.size = Vector2(GRID_SIZE * 0.9, GRID_SIZE * 0.9)
	marker.mesh = plane
	
	# –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
	var material = StandardMaterial3D.new()
	material.flags_transparent = true
	material.albedo_color = Color(0, 1, 0, 0.2)  # –ó–µ–ª–µ–Ω—ã–π, –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
	marker.material_override = material
	
	# –ü–æ–∑–∏—Ü–∏—è –º–∞—Ä–∫–µ—Ä–∞ - —Ü–µ–Ω—Ç—Ä –∫–ª–µ—Ç–∫–∏ —á—É—Ç—å –≤—ã—à–µ –ø–æ–ª–∞
	marker.position = grid_to_world(grid_x, grid_z, 0.1)
	
	# –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤ —á—Ç–æ–±—ã –ª–µ–∂–∞–ª –ø–ª–æ—Å–∫–æ
	marker.rotation_degrees.x = 90
	
	add_child(marker)
	print("‚úÖ –ú–∞—Ä–∫–µ—Ä –∫–ª–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω –≤: ", marker.position)

func setup_drone():
	if drone_scene == null:
		print("‚ùå DroneScene –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	
	# –ù–∞—Ö–æ–¥–∏–º –¥—Ä–æ–Ω–∞ –≤ DroneScene
	var drone = drone_scene.find_child("Drone") as CharacterBody3D
	if drone == null:
		print("‚ùå –î—Ä–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DroneScene")
		return
	
	print("‚úÖ –î—Ä–æ–Ω –Ω–∞–π–¥–µ–Ω: ", drone.name)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é - –í –¶–ï–ù–¢–†–ï –∫–ª–µ—Ç–∫–∏ (-2, -2) –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤—ã—Å–æ—Ç–µ
	drone.global_position = grid_to_world(-2, -2, GRID_SIZE)
	print("üöÅ –î—Ä–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–ª–µ—Ç–∫–∏ (-2, -2): ", drone.global_position)
	
	# –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏
	create_cell_marker(-2, -2)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è –¥—Ä–æ–Ω–∞
	if drone.has_signal("drone_moved"):
		drone.drone_moved.connect(_on_drone_moved)
		print("‚úÖ –°–∏–≥–Ω–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω")
	else:
		print("‚ùå –°–∏–≥–Ω–∞–ª drone_moved –Ω–µ –Ω–∞–π–¥–µ–Ω")

func _on_drone_moved():
	if is_level_completed:
		return
		
	check_level_completion()

func check_level_completion():
	if target_point == null:
		return
		
	var drone_scene = $DroneScene
	if drone_scene == null:
		return
		
	var drone = drone_scene.find_child("Drone") as CharacterBody3D
	if drone == null:
		return
	
	var distance = drone.global_position.distance_to(target_point.global_position)
	print("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏: ", distance)
	
	# –ï—Å–ª–∏ –¥—Ä–æ–Ω –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —á–µ—Ç–≤–µ—Ä—Ç–∏ –∫–ª–µ—Ç–∫–∏)
	if distance < GRID_SIZE / 4:
		complete_level()

func complete_level():
	if is_level_completed:
		return
		
	is_level_completed = true
	print("üéâ –£–†–û–í–ï–ù–¨ 1 –ó–ê–í–ï–†–®–ï–ù!")
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	if Global:
		Global.complete_level(1, 5, 3)
		print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
	
	show_success_message()

func show_success_message():
	var label = Label.new()
	label.text = "–£–†–û–í–ï–ù–¨ 1 –ó–ê–í–ï–†–®–ï–ù!\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
	label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	label.add_theme_font_size_override("font_size", 24)
	label.add_theme_color_override("font_color", Color.GREEN)
	
	var panel = Panel.new()
	panel.size = Vector2(500, 200)
	var viewport_size = get_viewport().get_visible_rect().size
	panel.position = (viewport_size - panel.size) / 2
	panel.add_child(label)
	
	var canvas = CanvasLayer.new()
	canvas.add_child(panel)
	add_child(canvas)
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
	await get_tree().create_timer(3.0).timeout
	return_to_selection()

func _input(event):
	if event is InputEventKey and event.pressed and event.keycode == KEY_ESCAPE:
		return_to_selection()

func return_to_selection():
	print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π...")
	get_tree().change_scene_to_file("res://script_game_level.tscn")
