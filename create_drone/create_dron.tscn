[gd_scene load_steps=3 format=3 uid="uid://b70lx416ht2xn"]

[ext_resource type="Script" uid="uid://bxjqfxylx2xxc" path="res://create_drone/back_butt.gd" id="1_caali"]

[sub_resource type="GDScript" id="GDScript_txuw4"]
script/source = "extends Node3D

# –°—Å—ã–ª–∫–∏ –Ω–∞ —É–∑–ª—ã
var components_container
var list_panel
var component_list
var add_buttons

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
var drone_frame = null
var drone_board = null
var motors = []
var propellers = []

# –ü—Ä–µ—Ñ–∞–±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
var frame_scene = preload(\"res://create_drone/components/frame.tscn\")
var board_scene = preload(\"res://create_drone/components/board.tscn\")
var motor_scene = preload(\"res://create_drone/components/motor.tscn\")
var propeller_scene = preload(\"res://create_drone/components/propeller.tscn\")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –∏ –≤—Ä–∞—â–µ–Ω–∏—è
var camera_rotation = Vector2(0, 0)
var camera_distance = 8.0
var is_rotating = false
var last_mouse_pos = Vector2(0, 0)

# –ò–Ω–µ—Ä—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
var rotation_velocity = Vector2(0, 0)
var is_dragging = false

# –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const ROTATION_SPEED = 0.01
const ZOOM_SPEED = 0.1
const MIN_DISTANCE = 3.0
const MAX_DISTANCE = 20.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–µ—Ä—Ü–∏–∏
const FRICTION = 0.92  # –¢—Ä–µ–Ω–∏–µ (0.9-0.99 - —á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –¥–æ–ª—å—à–µ –≤—Ä–∞—â–µ–Ω–∏–µ)
const MAX_VELOCITY = 0.1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω–µ—Ä—Ü–∏–∏

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
const MIN_VERTICAL_ANGLE = 0.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª (–≥–æ—Ä–∏–∑–æ–Ω—Ç)
const MAX_VERTICAL_ANGLE = PI/2 - 0.2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª (–ø–æ—á—Ç–∏ —Å–≤–µ—Ä—Ö—É)

@onready var camera_pivot = $CameraPivot
@onready var camera = $CameraPivot/Camera3D

func _ready():
	# –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–∑–ª—ã
	components_container = $Components
	list_panel = $UI/Hierarchy
	add_buttons = $UI/VBoxContainer
	
	# –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Complist —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
	component_list = find_component_list()
	
	if component_list == null:
		print(\"–û—à–∏–±–∫–∞: Complist –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...\")
		create_component_list()
	
	# –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
	if list_panel:
		list_panel.visible = false
	else:
		print(\"–û—à–∏–±–∫–∞: Hierarchy –Ω–µ –Ω–∞–π–¥–µ–Ω!\")
	
	# –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
	create_grid()
	
	# –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –ø–æ–ª–∞
	create_floor_line()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
	add_save_load_buttons()
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–Ω–æ–ø–æ–∫
	connect_buttons()
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
	update_camera_position()

func find_component_list():
	# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
	if has_node(\"UI/Hierarchy/Complist\"):
		return $UI/Hierarchy/Complist
	elif has_node(\"UI/Hierarchy/ComponentList\"):
		return $UI/Hierarchy/ComponentList
	elif has_node(\"UI/Hierarchy/List\"):
		return $UI/Hierarchy/List
	else:
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ Hierarchy
		var hierarchy = $UI/Hierarchy
		if hierarchy and hierarchy.get_child_count() > 0:
			for child in hierarchy.get_children():
				if child is ItemList:
					return child
				elif child.get_child_count() > 0:
					for grandchild in child.get_children():
						if grandchild is ItemList:
							return grandchild
	return null

func create_component_list():
	# –°–æ–∑–¥–∞–µ–º Complist –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	component_list = ItemList.new()
	component_list.name = \"Complist\"
	component_list.size = Vector2(280, 350)
	
	if list_panel:
		list_panel.add_child(component_list)
		component_list.position = Vector2(10, 10)
	else:
		print(\"–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å Complist - –Ω–µ—Ç –ø–∞–Ω–µ–ª–∏ Hierarchy\")

func add_save_load_buttons():
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏
	var save_load_container = HBoxContainer.new()
	save_load_container.position = Vector2(1920/2-200, 0)
	save_load_container.size = Vector2(200, 50)
	
	var save_button = Button.new()
	save_button.text = \"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä–æ–Ω\"
	save_button.connect(\"pressed\", save_drone)
	
	var load_button = Button.new()
	load_button.text = \"üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä–æ–Ω\"
	load_button.connect(\"pressed\", load_drone)
	
	var export_button = Button.new()
	export_button.text = \"üöÄ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ü–µ–Ω—ã\"
	export_button.connect(\"pressed\", export_drone_scene)
	
	save_load_container.add_child(save_button)
	save_load_container.add_child(load_button)
	save_load_container.add_child(export_button)
	
	$UI.add_child(save_load_container)

func connect_buttons():
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
	if has_node(\"UI/OpenClose\"):
		$UI/OpenClose.connect(\"pressed\", _on_OpenClose_pressed)
	else:
		print(\"–ö–Ω–æ–ø–∫–∞ OpenClose –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\")
	
	if has_node(\"UI/VBoxContainer/Frame\"):
		$UI/VBoxContainer/Frame.connect(\"pressed\", add_frame)
	else:
		print(\"–ö–Ω–æ–ø–∫–∞ Frame –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\")
	
	if has_node(\"UI/VBoxContainer/Board\"):
		$UI/VBoxContainer/Board.connect(\"pressed\", add_board)
	else:
		print(\"–ö–Ω–æ–ø–∫–∞ Board –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\")
	
	if has_node(\"UI/VBoxContainer/Motor\"):
		$UI/VBoxContainer/Motor.connect(\"pressed\", add_motor)
	else:
		print(\"–ö–Ω–æ–ø–∫–∞ Motor –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\")
	
	if has_node(\"UI/VBoxContainer/Propeller\"):
		$UI/VBoxContainer/Propeller.connect(\"pressed\", add_propeller)
	else:
		print(\"–ö–Ω–æ–ø–∫–∞ Propeller –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\")
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫–ª–∏–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	if component_list:
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ
		if not component_list.is_connected(\"item_clicked\", _on_component_list_item_clicked):
			component_list.connect(\"item_clicked\", _on_component_list_item_clicked)
			print(\"–°–∏–≥–Ω–∞–ª item_clicked –ø–æ–¥–∫–ª—é—á–µ–Ω\")
		else:
			print(\"–°–∏–≥–Ω–∞–ª item_clicked —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\")

func create_grid():
	# –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ç–∫–∞ –∏–∑ –∫—É–±–æ–≤
	for x in range(-5, 6):
		for z in range(-5, 6):
			var grid_cube = MeshInstance3D.new()
			var cube_mesh = BoxMesh.new()
			cube_mesh.size = Vector3(0.9, 0.1, 0.9)
			
			var material = StandardMaterial3D.new()
			material.albedo_color = Color(0.5, 0.5, 0.5, 0.3)
			cube_mesh.material = material
			
			grid_cube.mesh = cube_mesh
			grid_cube.position = Vector3(x, 0, z)
			$Grid.add_child(grid_cube)

func create_floor_line():
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–∏–Ω–∏—é –ø–æ–ª–∞ - –∫—Ä–∞—Å–Ω—É—é –ª–∏–Ω–∏—é –ø–æ –æ—Å–∏ X
	var line_mesh = MeshInstance3D.new()
	var immediate_mesh = ImmediateMesh.new()
	var material = StandardMaterial3D.new()
	
	material.albedo_color = Color(1, 0, 0, 0.8)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
	material.flags_unshaded = true
	
	immediate_mesh.surface_begin(Mesh.PRIMITIVE_LINES, material)
	
	# –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≤–¥–æ–ª—å –æ—Å–∏ X –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞
	immediate_mesh.surface_add_vertex(Vector3(-6, 0.02, 0))
	immediate_mesh.surface_add_vertex(Vector3(6, 0.02, 0))
	
	# –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≤–¥–æ–ª—å –æ—Å–∏ Z –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞
	immediate_mesh.surface_add_vertex(Vector3(0, 0.02, -6))
	immediate_mesh.surface_add_vertex(Vector3(0, 0.02, 6))
	
	immediate_mesh.surface_end()
	
	line_mesh.mesh = immediate_mesh
	add_child(line_mesh)

# ========== –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ò ==========

func save_drone():
	if not is_drone_complete():
		print(\"–î—Ä–æ–Ω –Ω–µ —Å–æ–±—Ä–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é! –ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.\")
		return
	
	var drone_data = {
		\"frame\": get_component_data(drone_frame),
		\"board\": get_component_data(drone_board) if drone_board else null,
		\"motors\": [],
		\"propellers\": []
	}
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª–∏
	for motor in motors:
		drone_data[\"motors\"].append(get_component_data(motor))
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã
	for propeller in propellers:
		drone_data[\"propellers\"].append(get_component_data(propeller))
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
	var file = FileAccess.open(\"user://saved_drone.json\", FileAccess.WRITE)
	if file:
		file.store_string(JSON.stringify(drone_data))
		file.close()
		print(\"–î—Ä–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ user://saved_drone.json\")
	else:
		print(\"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä–æ–Ω–∞!\")

func load_drone():
	var file = FileAccess.open(\"user://saved_drone.json\", FileAccess.READ)
	if file:
		var json_string = file.get_as_text()
		file.close()
		
		var json = JSON.new()
		var parse_result = json.parse(json_string)
		
		if parse_result == OK:
			var drone_data = json.data
			clear_drone()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥—Ä–æ–Ω
			create_drone_from_data(drone_data)
			print(\"–î—Ä–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω!\")
		else:
			print(\"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä–æ–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\")
	else:
		print(\"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!\")

func export_drone_scene():
	if not is_drone_complete():
		print(\"–î—Ä–æ–Ω –Ω–µ —Å–æ–±—Ä–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é! –ù–µ–ª—å–∑—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.\")
		return
	
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –¥—Ä–æ–Ω–∞
	var drone_scene = PackedScene.new()
	
	# –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥—Ä–æ–Ω–∞ –∫–∞–∫ CharacterBody3D
	var drone_root = CharacterBody3D.new()
	drone_root.name = \"ExportedDrone\"
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä–æ–Ω–æ–º
	var drone_script = load(\"res://DroneLevels/Drone.gd\")
	if drone_script:
		drone_root.set_script(drone_script)
		print(\"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç Drone.gd\")
	
	# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
	if drone_frame:
		var frame_copy = drone_frame.duplicate()
		drone_root.add_child(frame_copy)
		frame_copy.owner = drone_root
		print(\"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–º–∞\")
	
	if drone_board:
		var board_copy = drone_board.duplicate()
		drone_root.add_child(board_copy)
		board_copy.owner = drone_root
		print(\"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç–∞\")
	
	for i in range(motors.size()):
		var motor_copy = motors[i].duplicate()
		drone_root.add_child(motor_copy)
		motor_copy.owner = drone_root
		print(\"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–≥–∞—Ç–µ–ª—å \", i+1)
	
	for i in range(propellers.size()):
		var propeller_copy = propellers[i].duplicate()
		drone_root.add_child(propeller_copy)
		propeller_copy.owner = drone_root
		print(\"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–ø–µ–ª–ª–µ—Ä \", i+1)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥—Ä–æ–Ω–∞
	drone_root.position = Vector3(0, 1, 0)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é –¥–ª—è –¥—Ä–æ–Ω–∞
	add_collision_to_drone(drone_root)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—É
	var result = drone_scene.pack(drone_root)
	if result == OK:
		var error = ResourceSaver.save(drone_scene, \"user://exported_drone.tscn\")
		if error == OK:
			print(\"‚úÖ –°—Ü–µ–Ω–∞ –¥—Ä–æ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ user://exported_drone.tscn\")
			print(\"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞:\")
			print_drone_structure(drone_root)
		else:
			print(\"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ü–µ–Ω—ã!\")
	else:
		print(\"‚ùå –û—à–∏–±–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏ —Å—Ü–µ–Ω—ã!\")

func add_collision_to_drone(drone_node: CharacterBody3D):
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é –¥–ª—è –¥—Ä–æ–Ω–∞
	var collision = CollisionShape3D.new()
	var shape = BoxShape3D.new()
	shape.size = Vector3(3, 1, 3)  # –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–∏–∑–∏–∏ –¥–ª—è –¥—Ä–æ–Ω–∞
	collision.shape = shape
	collision.position = Vector3(0, 0.5, 0)
	drone_node.add_child(collision)
	collision.owner = drone_node
	print(\"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–ª–∏–∑–∏—è –¥—Ä–æ–Ω—É\")

func print_drone_structure(node: Node, indent: int = 0):
	var indent_str = \"  \".repeat(indent)
	print(indent_str + \"‚îî‚îÄ \" + node.name + \" (\" + node.get_class() + \") –ø–æ–∑–∏—Ü–∏—è: \" + str(node.position))
	for child in node.get_children():
		if child is Node3D:
			print_drone_structure(child, indent + 1)

func get_component_data(component):
	if component == null:
		return null
	
	return {
		\"component_type\": component.component_type,
		\"component_name\": component.component_name,
		\"position\": {
			\"x\": component.position.x,
			\"y\": component.position.y,
			\"z\": component.position.z
		},
		\"rotation\": {
			\"x\": component.rotation.x,
			\"y\": component.rotation.y,
			\"z\": component.rotation.z
		}
	}

func create_drone_from_data(drone_data):
	# –°–æ–∑–¥–∞–µ–º —Ä–∞–º—É
	if drone_data.get(\"frame\"):
		add_frame_from_data(drone_data[\"frame\"])
	
	# –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—É
	if drone_data.get(\"board\"):
		add_board_from_data(drone_data[\"board\"])
	
	# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª–∏
	if drone_data.get(\"motors\"):
		for motor_data in drone_data[\"motors\"]:
			add_motor_from_data(motor_data)
	
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã
	if drone_data.get(\"propellers\"):
		for propeller_data in drone_data[\"propellers\"]:
			add_propeller_from_data(propeller_data)
	
	update_component_list()

func add_frame_from_data(frame_data):
	var new_frame = frame_scene.instantiate()
	components_container.add_child(new_frame)
	new_frame.position = Vector3(frame_data[\"position\"][\"x\"], frame_data[\"position\"][\"y\"], frame_data[\"position\"][\"z\"])
	new_frame.rotation = Vector3(frame_data[\"rotation\"][\"x\"], frame_data[\"rotation\"][\"y\"], frame_data[\"rotation\"][\"z\"])
	drone_frame = new_frame
	print(\"–†–∞–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–∏—Ü–∏—è: \", new_frame.position)

func add_board_from_data(board_data):
	var new_board = board_scene.instantiate()
	components_container.add_child(new_board)
	new_board.position = Vector3(board_data[\"position\"][\"x\"], board_data[\"position\"][\"y\"], board_data[\"position\"][\"z\"])
	new_board.rotation = Vector3(board_data[\"rotation\"][\"x\"], board_data[\"rotation\"][\"y\"], board_data[\"rotation\"][\"z\"])
	drone_board = new_board
	print(\"–ü–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–∏—Ü–∏—è: \", new_board.position)

func add_motor_from_data(motor_data):
	var new_motor = motor_scene.instantiate()
	components_container.add_child(new_motor)
	new_motor.position = Vector3(motor_data[\"position\"][\"x\"], motor_data[\"position\"][\"y\"], motor_data[\"position\"][\"z\"])
	new_motor.rotation = Vector3(motor_data[\"rotation\"][\"x\"], motor_data[\"rotation\"][\"y\"], motor_data[\"rotation\"][\"z\"])
	motors.append(new_motor)
	print(\"–î–≤–∏–≥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–∏—Ü–∏—è: \", new_motor.position)

func add_propeller_from_data(propeller_data):
	var new_propeller = propeller_scene.instantiate()
	components_container.add_child(new_propeller)
	new_propeller.position = Vector3(propeller_data[\"position\"][\"x\"], propeller_data[\"position\"][\"y\"], propeller_data[\"position\"][\"z\"])
	new_propeller.rotation = Vector3(propeller_data[\"rotation\"][\"x\"], propeller_data[\"rotation\"][\"y\"], propeller_data[\"rotation\"][\"z\"])
	propellers.append(new_propeller)
	print(\"–ü—Ä–æ–ø–µ–ª–ª–µ—Ä —Å–æ–∑–¥–∞–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–∏—Ü–∏—è: \", new_propeller.position)

func clear_drone():
	# –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	if drone_frame:
		print(\"–£–¥–∞–ª—è–µ–º —Ä–∞–º—É\")
		drone_frame.queue_free()
		drone_frame = null
	
	if drone_board:
		print(\"–£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—É\")
		drone_board.queue_free()
		drone_board = null
	
	for motor in motors:
		print(\"–£–¥–∞–ª—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å\")
		motor.queue_free()
	motors.clear()
	
	for propeller in propellers:
		print(\"–£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä\")
		propeller.queue_free()
	propellers.clear()
	
	update_component_list()

func is_drone_complete():
	return (drone_frame != null and 
			drone_board != null and 
			motors.size() >= 4 and 
			propellers.size() >= 4)

# ========== –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

func _input(event):
	# –í—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –ü–ö–ú
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_RIGHT:
			if event.pressed:
				is_rotating = true
				is_dragging = true
				last_mouse_pos = event.position
				# –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–µ—Ä—Ü–∏—é –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤—Ä–∞—â–µ–Ω–∏—è
				rotation_velocity = Vector2(0, 0)
			else:
				is_rotating = false
				is_dragging = false
		
		# –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ/–æ—Ç–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
		if event.button_index == MOUSE_BUTTON_WHEEL_UP:
			camera_distance = clamp(camera_distance - ZOOM_SPEED, MIN_DISTANCE, MAX_DISTANCE)
			update_camera_position()
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			camera_distance = clamp(camera_distance + ZOOM_SPEED, MIN_DISTANCE, MAX_DISTANCE)
			update_camera_position()
	
	# –í—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ —Å –∑–∞–∂–∞—Ç–æ–π –ü–ö–ú
	if event is InputEventMouseMotion and is_rotating:
		var mouse_delta = event.position - last_mouse_pos
		
		# –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–µ—Ä—Ü–∏–∏
		rotation_velocity = Vector2(
			-mouse_delta.y * ROTATION_SPEED * 0.5,
			-mouse_delta.x * ROTATION_SPEED * 0.5
		)
		
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
		rotation_velocity.x = clamp(rotation_velocity.x, -MAX_VELOCITY, MAX_VELOCITY)
		rotation_velocity.y = clamp(rotation_velocity.y, -MAX_VELOCITY, MAX_VELOCITY)
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
		camera_rotation.x += -mouse_delta.y * ROTATION_SPEED
		camera_rotation.y += -mouse_delta.x * ROTATION_SPEED
		
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (–Ω–µ–ª—å–∑—è –æ–ø—É—Å–∫–∞—Ç—å –∫–∞–º–µ—Ä—É –Ω–∏–∂–µ –ø–æ–ª–∞)
		camera_rotation.x = clamp(camera_rotation.x, MIN_VERTICAL_ANGLE, MAX_VERTICAL_ANGLE)
		
		last_mouse_pos = event.position
		update_camera_position()

func _process(delta):
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–µ—Ä—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ –≤—Ä–∞—â–∞–µ–º –≤—Ä—É—á–Ω—É—é
	if not is_dragging and (rotation_velocity.x != 0 or rotation_velocity.y != 0):
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∏–Ω–µ—Ä—Ü–∏–∏
		camera_rotation.x += rotation_velocity.x
		camera_rotation.y += rotation_velocity.y
		
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (–Ω–µ–ª—å–∑—è –æ–ø—É—Å–∫–∞—Ç—å –∫–∞–º–µ—Ä—É –Ω–∏–∂–µ –ø–æ–ª–∞)
		camera_rotation.x = clamp(camera_rotation.x, MIN_VERTICAL_ANGLE, MAX_VERTICAL_ANGLE)
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
		rotation_velocity *= FRICTION
		
		# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–µ—Ä—Ü–∏—é –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è
		if abs(rotation_velocity.x) < 0.0001 and abs(rotation_velocity.y) < 0.0001:
			rotation_velocity = Vector2(0, 0)
		
		update_camera_position()

func update_camera_position():
	# –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–æ–≤ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
	var target_position = Vector3.ZERO
	
	# –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã
	var camera_position = Vector3(
		sin(camera_rotation.y) * cos(camera_rotation.x),
		sin(camera_rotation.x),
		cos(camera_rotation.y) * cos(camera_rotation.x)
	) * camera_distance
	
	camera.position = camera_position
	camera.look_at(target_position, Vector3.UP)

func _on_OpenClose_pressed():
	if list_panel and component_list:
		list_panel.visible = !list_panel.visible
		update_component_list()

func update_component_list():
	if component_list == null:
		return
		
	component_list.clear()
	
	if drone_frame:
		component_list.add_item(\"–†–∞–º–∞: \" + drone_frame.component_name)
		print(\"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–º–∞ –≤ —Å–ø–∏—Å–æ–∫\")
	if drone_board:
		component_list.add_item(\"–ü–ª–∞—Ç–∞: \" + drone_board.component_name)
		print(\"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–ª–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫\")
	
	for i in motors.size():
		component_list.add_item(\"–î–≤–∏–≥–∞—Ç–µ–ª—å \" + str(i+1) + \": \" + motors[i].component_name)
		print(\"–î–æ–±–∞–≤–ª–µ–Ω –¥–≤–∏–≥–∞—Ç–µ–ª—å \", i+1, \" –≤ —Å–ø–∏—Å–æ–∫\")
	
	for i in propellers.size():
		component_list.add_item(\"–ü—Ä–æ–ø–µ–ª–ª–µ—Ä \" + str(i+1) + \": \" + propellers[i].component_name)
		print(\"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–ø–µ–ª–ª–µ—Ä \", i+1, \" –≤ —Å–ø–∏—Å–æ–∫\")
	
	print(\"=== –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===\")
	print(\"–†–∞–º–∞: \", \"–µ—Å—Ç—å\" if drone_frame else \"–Ω–µ—Ç\")
	print(\"–ü–ª–∞—Ç–∞: \", \"–µ—Å—Ç—å\" if drone_board else \"–Ω–µ—Ç\") 
	print(\"–î–≤–∏–≥–∞—Ç–µ–ª–µ–π: \", motors.size())
	print(\"–ü—Ä–æ–ø–µ–ª–ª–µ—Ä–æ–≤: \", propellers.size())

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ —Å–ø–∏—Å–∫–µ
func _on_component_list_item_clicked(index: int, at_position: Vector2, mouse_button_index: int):
	print(\"–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É \", index, \" –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ \", mouse_button_index)
	
	if mouse_button_index == MOUSE_BUTTON_LEFT:  # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
		delete_component_by_index(index)

func delete_component_by_index(index: int):
	if component_list == null:
		print(\"Complist –Ω–µ –Ω–∞–π–¥–µ–Ω\")
		return
	
	var item_count = component_list.item_count
	if index < 0 or index >= item_count:
		print(\"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: \", index)
		return
	
	var item_text = component_list.get_item_text(index)
	print(\"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: \", item_text)
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–¥–∞–ª—è—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É
	if item_text.begins_with(\"–†–∞–º–∞:\"):
		print(\"–£–¥–∞–ª—è–µ–º —Ä–∞–º—É\")
		delete_frame()
	elif item_text.begins_with(\"–ü–ª–∞—Ç–∞:\"):
		print(\"–£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—É\")
		delete_board()
	elif item_text.begins_with(\"–î–≤–∏–≥–∞—Ç–µ–ª—å\"):
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
		var motor_number = extract_number_from_text(item_text)
		if motor_number != -1:
			print(\"–£–¥–∞–ª—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å \", motor_number)
			delete_motor(motor_number - 1)  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–º–µ—Ä–∞ —Å 1, –∞ –≤ –º–∞—Å—Å–∏–≤–µ —Å 0
		else:
			print(\"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑: \", item_text)
	elif item_text.begins_with(\"–ü—Ä–æ–ø–µ–ª–ª–µ—Ä\"):
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–ø–µ–ª–ª–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
		var propeller_number = extract_number_from_text(item_text)
		if propeller_number != -1:
			print(\"–£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä \", propeller_number)
			delete_propeller(propeller_number - 1)
		else:
			print(\"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –ø—Ä–æ–ø–µ–ª–ª–µ—Ä–∞ –∏–∑: \", item_text)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
func extract_number_from_text(text: String) -> int:
	var regex = RegEx.new()
	regex.compile(\"(\\\\d+)\")
	var result = regex.search(text)
	if result:
		return result.get_string(1).to_int()
	return -1

# –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
func delete_frame():
	if drone_frame:
		print(\"–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–º—ã\")
		# –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–ª–∞—Ç—É, –¥–≤–∏–≥–∞—Ç–µ–ª–∏, –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã)
		delete_board()  # –ü–ª–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–º—ã
		
		# –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã
		while motors.size() > 0:
			delete_motor(0)
		
		# –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Ä–∞–º—É
		drone_frame.queue_free()
		drone_frame = null
		update_component_list()
		print(\"–†–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞\")
	else:
		print(\"–†–∞–º–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞\")

func delete_board():
	if drone_board:
		print(\"–£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—É\")
		drone_board.queue_free()
		drone_board = null
		update_component_list()
		print(\"–ü–ª–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞\")
	else:
		print(\"–ü–ª–∞—Ç–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞\")

func delete_motor(index: int):
	if index >= 0 and index < motors.size():
		print(\"–£–¥–∞–ª—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å \", index + 1)
		# –£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä –Ω–∞ —ç—Ç–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		if index < propellers.size():
			delete_propeller(index)
		
		# –£–¥–∞–ª—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å
		motors[index].queue_free()
		motors.remove_at(index)
		update_component_list()
		print(\"–î–≤–∏–≥–∞—Ç–µ–ª—å \", index + 1, \" —É–¥–∞–ª–µ–Ω\")
	else:
		print(\"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–≤–∏–≥–∞—Ç–µ–ª—è: \", index)

func delete_propeller(index: int):
	if index >= 0 and index < propellers.size():
		print(\"–£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä \", index + 1)
		propellers[index].queue_free()
		propellers.remove_at(index)
		update_component_list()
		print(\"–ü—Ä–æ–ø–µ–ª–ª–µ—Ä \", index + 1, \" —É–¥–∞–ª–µ–Ω\")
	else:
		print(\"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–ø–µ–ª–ª–µ—Ä–∞: \", index)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
func add_frame():
	if drone_frame == null:
		print(\"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–º—É\")
		var new_frame = frame_scene.instantiate()
		components_container.add_child(new_frame)
		new_frame.position = Vector3(0, 0.5, 0)
		drone_frame = new_frame
		print(\"–†–∞–º–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–∑–∏—Ü–∏—è: \", new_frame.position)
		print(\"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —É components_container: \", components_container.get_child_count())
		update_component_list()
	else:
		print(\"–†–∞–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\")

func add_board():
	if drone_frame != null and drone_board == null:
		print(\"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–ª–∞—Ç—É\")
		var new_board = board_scene.instantiate()
		components_container.add_child(new_board)
		new_board.position = drone_frame.position + Vector3(0, 0.2, 0)
		drone_board = new_board
		print(\"–ü–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–∑–∏—Ü–∏—è: \", new_board.position)
		update_component_list()
	else:
		print(\"–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—É: \", \"–Ω–µ—Ç —Ä–∞–º—ã\" if drone_frame == null else \"–ø–ª–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\")

func add_motor():
	if drone_frame != null and motors.size() < 4:
		print(\"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å \", motors.size() + 1)
		var new_motor = motor_scene.instantiate()
		components_container.add_child(new_motor)
		
		# –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è 4 –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–∞
		var motor_positions = [
			Vector3(1, 0.2, 1),
			Vector3(-1, 0.2, 1),
			Vector3(1, 0.2, -1),
			Vector3(-1, 0.2, -1)
		]
		
		new_motor.position = drone_frame.position + motor_positions[motors.size()]
		motors.append(new_motor)
		print(\"–î–≤–∏–≥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø–æ–∑–∏—Ü–∏—è: \", new_motor.position)
		update_component_list()
	else:
		print(\"–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å: \", \"–Ω–µ—Ç —Ä–∞–º—ã\" if drone_frame == null else \"–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π\")

func add_propeller():
	if motors.size() > 0 and propellers.size() < motors.size():
		print(\"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–ø–µ–ª–ª–µ—Ä \", propellers.size() + 1)
		var new_propeller = propeller_scene.instantiate()
		components_container.add_child(new_propeller)
		
		# –°—Ç–∞–≤–∏–º –ø—Ä–æ–ø–µ–ª–ª–µ—Ä –Ω–∞–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º
		var motor_index = propellers.size()
		new_propeller.position = motors[motor_index].position + Vector3(0, 0.3, 0)
		propellers.append(new_propeller)
		print(\"–ü—Ä–æ–ø–µ–ª–ª–µ—Ä —Å–æ–∑–¥–∞–Ω, –ø–æ–∑–∏—Ü–∏—è: \", new_propeller.position)
		update_component_list()
	else:
		print(\"–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–ø–µ–ª–ª–µ—Ä: \", \"–Ω–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π\" if motors.size() == 0 else \"—É –≤—Å–µ—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã\")
"

[node name="create_dron" type="Node3D"]
script = SubResource("GDScript_txuw4")

[node name="Grid" type="GridMap" parent="."]

[node name="Components" type="Node3D" parent="."]

[node name="CameraPivot" type="Node3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="CameraPivot"]

[node name="UI" type="CanvasLayer" parent="."]

[node name="OpenClose" type="Button" parent="UI"]
offset_left = 1620.0
offset_right = 1920.0
offset_bottom = 112.0
text = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"

[node name="Hierarchy" type="Panel" parent="UI"]
offset_left = 1620.0
offset_top = 111.0
offset_right = 1920.0
offset_bottom = 511.0

[node name="Complist" type="ItemList" parent="UI/Hierarchy"]
layout_mode = 0
offset_left = 10.0
offset_top = 91.0
offset_right = 290.0
offset_bottom = 391.0

[node name="Label" type="Label" parent="UI/Hierarchy"]
layout_mode = 0
offset_top = 4.0
offset_right = 300.0
offset_bottom = 84.0
theme_override_font_sizes/font_size = 56
text = "–ò–µ—Ä–∞—Ä—Ö–∏—è"
horizontal_alignment = 1

[node name="VBoxContainer" type="VBoxContainer" parent="UI"]
offset_left = 4.0
offset_top = 956.0
offset_right = 404.0
offset_bottom = 1080.0
theme_override_constants/separation = 0

[node name="Frame" type="Button" parent="UI/VBoxContainer"]
layout_mode = 2
action_mode = 0
text = "–†–∞–º–∞"

[node name="Board" type="Button" parent="UI/VBoxContainer"]
layout_mode = 2
action_mode = 0
text = "–ü–ª–∞—Ç–∞"

[node name="Motor" type="Button" parent="UI/VBoxContainer"]
layout_mode = 2
action_mode = 0
text = "–ú–æ—Ç–æ—Ä"

[node name="Propeller" type="Button" parent="UI/VBoxContainer"]
layout_mode = 2
action_mode = 0
text = "–ü—Ä–æ–ø–µ–ª–ª–µ—Ä"

[node name="Control" type="Control" parent="UI"]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = ExtResource("1_caali")

[node name="back_butt" type="Button" parent="UI/Control"]
layout_mode = 0
offset_right = 256.0
offset_bottom = 144.0
text = "–≤–µ—Ä–Ω—É—Ç—å—Å—è"
